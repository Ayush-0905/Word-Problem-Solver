# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(671, 446)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("download.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(210, 10, 241, 141))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("images.jpg"))
        self.label_2.setObjectName("label_2")
        self.input_problem = QtWidgets.QLineEdit(self.centralwidget)
        self.input_problem.setGeometry(QtCore.QRect(20, 190, 641, 41))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.input_problem.setFont(font)
        self.input_problem.setStyleSheet("color: rgb(255, 255, 255);\n"
"")
        self.input_problem.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.input_problem.setObjectName("input_problem")
        self.push_result = QtWidgets.QPushButton(self.centralwidget)
        self.push_result.setGeometry(QtCore.QRect(230, 250, 156, 62))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.push_result.sizePolicy().hasHeightForWidth())
        self.push_result.setSizePolicy(sizePolicy)
        self.push_result.setStyleSheet("QPushButton{\n"
"    color:rgb(255,255,255);\n"
"    background-color: rgb(191,191,191);\n"
"font: 18pt \"Arial Rounded MT Bold\";\n"
"border-radius:30px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(238,238,238);\n"
"color:rgb(61,61,61);\n"
"}\n"
"\n"
"QPushButton{\n"
"background-color:rgb(208,0,0);\n"
"    color:rgb(255,255,255);\n"
"}")
        self.push_result.setAutoDefault(True)
        self.push_result.setDefault(True)
        self.push_result.setObjectName("push_result")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 340, 601, 51))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setText("")
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 671, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.push_result.clicked.connect(self.module)

    def speak(text):
        label.setText(int(text))
        
    def module(self):

        def speak(text):
            self.label.setText(str(text))

        import numpy as np
        import pandas as pd
        import json
        import nltk
        from keras.preprocessing.text import Tokenizer
        from keras.layers import Input,Embedding,LSTM,Dense,GlobalMaxPooling1D,Flatten
        from keras.models import Model


        # In[2]:


        with open("data.json") as content:
            data1=json.load(content)
            print(data1)


        # In[3]:


        tags=[]
        inputs=[]
        responses={}

        for intent in data1['intents']:
            responses[intent['tag']]=intent['responses']
            for lines in intent['patterns']:
                inputs.append(lines)
                tags.append(intent['tag'])
                


        # In[4]:


        data = pd.DataFrame({"inputs":inputs,
                             "tags":tags})
        data


        # In[5]:


        import string
        data['inputs']=data['inputs'].apply(lambda wrd:[ltrs.lower() for ltrs in wrd if ltrs not in string.punctuation])
        data['inputs']=data['inputs'].apply(lambda wrd: ''.join(wrd))
        data


        # In[6]:


        tokenizer = Tokenizer(num_words=2000)
        tokenizer.fit_on_texts(data['inputs'])
        print(tokenizer)
        train = tokenizer.texts_to_sequences(data['inputs'])
        print(train)

        from keras.preprocessing.sequence import pad_sequences
        x_train = pad_sequences(train)
        print(x_train)

        from sklearn.preprocessing import LabelEncoder
        le = LabelEncoder()
        y_train = le.fit_transform(data['tags'])
        print("y",y_train)

        input_shape = x_train.shape[1]
        print(input_shape)


        # In[ ]:


        vocabulary = len(tokenizer.word_index)
        print("No. of unique tokens: ",vocabulary)
        output_length = le.classes_.shape[0]
        print("Output Length:",output_length)


        # In[8]:


        i = Input(shape=(input_shape,))
        x=Embedding(vocabulary+1,10)(i)
        x = LSTM(10,return_sequences=True)(x)
        x = Flatten()(x)
        x = Dense(output_length,activation="softmax")(x)
        model = Model(i,x)
        model.summary()


        # In[ ]:


        model.compile(loss="sparse_categorical_crossentropy",optimizer='adam',metrics=['accuracy'])


        # In[17]:


        model.fit(x_train,y_train,epochs=200)
        model.save('model.h5')


        # In[16]:


        import random
        import keras
        model = keras.models.load_model('model.h5')
        '''import os
        os.system('cls' if os.name == 'nt' else 'clear')'''
        print("😎😎😎😎😎😎Welcome To Ayu by great 👨‍🎓👨‍🎓Ayush Agrawal 👨‍🎓👨‍🎓of Class VII-C of VSEC,Shyam Nagar 🏫🏫🏫🏫🏫🏫🏫🏫🏫🏫🏫")
        texts_p = []
        prediction_input=self.input_problem.text()
        text=prediction_input
        prediction_input= [letters.lower() for letters in prediction_input if letters not in string.punctuation]
        prediction_input=''.join(prediction_input)
        texts_p.append(prediction_input)
        
        prediction_input = tokenizer.texts_to_sequences(texts_p)
        prediction_input = np.array(prediction_input).reshape(-1)
        prediction_input = pad_sequences([prediction_input],input_shape)
        
        output = model.predict(prediction_input)
        output = output.argmax()
        response_tag = le.inverse_transform([output])[0]
        #speak(random.choice(responses[response_tag]))
        if response_tag == "add":
            import re
            numeric_values = re.findall(r'\d+', text)
            numeric_values = [int(value) for value in numeric_values]
            result = sum(numeric_values)
            speak(result)
            
        elif response_tag == "sub":
            import re
            numeric_values = re.findall(r'\d+', text)
            numeric_values = [int(value) for value in numeric_values]
            maximum_value = max(numeric_values)
            numeric_values.remove(maximum_value)
            s = sum(numeric_values)
            result = maximum_value - s
            speak(result)

        elif response_tag=="mul":
            import re
            numeric_values = re.findall(r'\d+', text)
            numeric_values = [int(value) for value in numeric_values]
            result = 1
            for num in numeric_values:
                result *= num
            speak(result)

            
        elif response_tag == "div":
            import re
            numeric_values = re.findall(r'\d+', text)
            numeric_values = [int(value) for value in numeric_values]
            result = numeric_values[0]
            for num in numeric_values[1:]:
                if num != 0:  
                    result /= num
                    speak(result)
                else:
                    speak("Sorry..")
        elif response_tag == "lcm":
            import re
            numeric_values = re.findall(r'\d+', text)
            numeric_values = [int(value) for value in numeric_values]
            import lcmhcf
            result = lcmhcf.find_lcm(numeric_values)
            speak(result)
        elif response_tag == "hcf":
            import re
            numeric_values = re.findall(r'\d+', text)
            numeric_values = [int(value) for value in numeric_values]
            import lcmhcf
            result = lcmhcf.find_hcf(numeric_values)
            speak(result)
        elif response_tag == "direct":
            import re
            numeric_values = re.findall(r'\d+', text)
            numeric_values = [int(value) for value in numeric_values]
            n1=numeric_values[0]
            n2=numeric_values[1]
            n3 = numeric_values[2]
            if n1>n2:
                divison = n1/n2
            elif n2>n1:
                divison = n2/n1
            else:
                exit()
            result = divison*n3
            speak(result)
        elif response_tag == "inverse":
            import re
            numeric_values = re.findall(r'\d+', text)
            numeric_values = [int(value) for value in numeric_values]
            n1=numeric_values[0]
            n2=numeric_values[1]
            n3 = numeric_values[2]
            if n1>n2:
                divison = n1*n2
            elif n2>n1:
                divison = n2*n1
            else:
                exit()
            result = divison/n3
            speak(result)                
        else:
            speak("(Ayu) 📚✖️➕➗🔢 : Error.... Sorry sir")


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Word_problem_Solver"))
        self.input_problem.setWhatsThis(_translate("MainWindow", "Password"))
        self.input_problem.setPlaceholderText(_translate("MainWindow", "WORD problem"))
        self.push_result.setText(_translate("MainWindow", "Get Result"))
        self.push_result.setShortcut(_translate("MainWindow", "C"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
